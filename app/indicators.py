import pandas as pd


def bollinger_bands(data: pd.DataFrame, window=20, std_dev=2):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞.
    :param data: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π 'close'.
    :param window: –û–∫–Ω–æ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π.
    :param std_dev: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π.
    :return: (–≤–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ—Å–∞, —Å—Ä–µ–¥–Ω—è—è –ø–æ–ª–æ—Å–∞, –Ω–∏–∂–Ω—è—è –ø–æ–ª–æ—Å–∞)
    """
    rolling_mean = data['close'].rolling(window=window).mean()
    rolling_std = data['close'].rolling(window=window).std()

    upper_band = rolling_mean + (rolling_std * std_dev)
    lower_band = rolling_mean - (rolling_std * std_dev)

    return upper_band, rolling_mean, lower_band


def is_price_outside_bollinger(data: pd.DataFrame):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ–±–∏–ª–∞ –ª–∏ —Ü–µ–Ω–∞ –≤–µ—Ä—Ö–Ω—é—é/–Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞.
    """
    upper_band, _, lower_band = bollinger_bands(data)
    latest_close = data['close'].iloc[-1]

    if latest_close > upper_band.iloc[-1]:
        return "üî¥ –¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)"
    elif latest_close < lower_band.iloc[-1]:
        return "üü¢ –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)"
    return "‚ö™ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"


def calculate_rsi(data: pd.DataFrame, periods: int = 14) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI.
    :param data: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π 'close'.
    :param window: –û–∫–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI.
    :return: –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI.
    """
    delta = data['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=periods).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=periods).mean()

    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))

    return rsi.iloc[-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI


def check_rsi_signal(data: pd.DataFrame):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç RSI –∏ –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª.
    """
    rsi = calculate_rsi(data)
    if rsi > 70:
        return f"üî¥ RSI = {round(rsi, 2)} (–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)"
    elif rsi < 30:
        return f"üü¢ RSI = {round(rsi, 2)} (–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)"
    return f"‚ö™ RSI = {round(rsi, 2)} (–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ)"


def combined_market_analysis(data: pd.DataFrame):
    """
    –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –∏ RSI.
    """
    bollinger_signal = is_price_outside_bollinger(data)
    rsi_signal = check_rsi_signal(data)

    print(bollinger_signal)
    print(rsi_signal)

    if "–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å" in bollinger_signal and "–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å" in rsi_signal:
        return f"üö® –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É! {bollinger_signal}, {rsi_signal}"

    if "–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å" in bollinger_signal and "–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å" in rsi_signal:
        return f"üìà –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É! {bollinger_signal}, {rsi_signal}"

    return f"{bollinger_signal}, {rsi_signal}"


def detect_crash_reversal(data: pd.DataFrame, drop_threshold=5, period=10, volume_multiplier=1.5):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ü–µ–Ω—ã.
    :param data: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å—Ç–æ–ª–±—Ü—ã 'close' –∏ 'volume').
    :param drop_threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è.
    :param period: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    :param volume_multiplier: –í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è –æ–±—ä–µ–º –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è.
    :return: True, –µ—Å–ª–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω.
    """
    recent_data = data.iloc[-period:]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    price_change = (recent_data["close"].iloc[-1] - recent_data["close"].iloc[0]) / recent_data["close"].iloc[0] * 100

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ drop_threshold%
    if price_change < -drop_threshold:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç –æ–±—ä—ë–º–æ–≤
        avg_volume_before = data["volume"].iloc[-(period * 2):-period].mean()
        avg_volume_after = recent_data["volume"].mean()

        if avg_volume_after > avg_volume_before * volume_multiplier:
            return True  # –†–∞–∑–≤–æ—Ä–æ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω

    return False
