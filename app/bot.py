import asyncio
import re
import io
import matplotlib.pyplot as plt
from database import log_to_db
from decimal import Decimal, ROUND_DOWN
from telebot.async_telebot import AsyncTeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from trading import get_price, place_order, get_open_orders, check_market, fetch_historical_data, get_balance, \
    make_order, fetch_candlestick_data, start_ws_monitoring, stop_ws_monitoring, monitoring
from indicators import calculate_rsi, detect_crash_reversal, combined_market_analysis
from config import TELEGRAM_TOKEN, SYMBOL
from logger import logger
import pandas as pd
from binance.client import Client
from config import API_KEY, API_SECRET, CHAT_ID
from keyboardMenu import get_main_keyboard, get_buy_menu, get_sell_menu

bot = AsyncTeleBot(TELEGRAM_TOKEN)
client = Client(API_KEY, API_SECRET)
# monitoring = True


def is_authorized(user_id):
    return str(user_id) == CHAT_ID


def is_monitoring():
    return monitoring


def start_monitoring():
    global monitoring
    if not monitoring:
        monitoring = True
        asyncio.create_task(monitor_market())


def stop_monitoring():
    global monitoring
    monitoring = False


@bot.message_handler(commands=["start", "menu"])
async def send_menu(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await bot.send_message(message.chat.id, text, reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda message: message.text == "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
async def market_analysis(message):
    data = fetch_historical_data("BTCUSDT", interval="15m", limit=50)
    analysis = combined_market_analysis(data)
    await bot.send_message(message.chat.id, f"üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:\n\n{analysis}")


@bot.message_handler(func=lambda message: message.text == "üìä –ö—É—Ä—Å")
async def send_price(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC.
    """
    price = get_price()
    await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: {price} USDT", reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda message: message.text == "üìâ –ö—É–ø–∏—Ç—å")
async def buy_menu(message):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–∫—É–ø–∫–∏.
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏:", reply_markup=get_buy_menu())


@bot.message_handler(func=lambda message: message.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É")
async def buy_now_menu(message):
    """
    –ú–µ–Ω—é —Å —à–∞–≥–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ (25%, 50%, 75%, 100%).
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    usdt_balance = get_balance("USDT")
    price = get_price()
    if usdt_balance < 10:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –¥–µ–Ω—å–≥–∏
        await bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏! üî¥", reply_markup=get_main_keyboard())
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for percent in [25, 50, 75, 100]:
        amount = round((usdt_balance * percent / 100) / price, 6)
        keyboard.add(KeyboardButton(f"{percent}% ({amount} BTC)"))

    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    await bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ {price} BTC:",
                           reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == "üéØ –ö—É–ø–∏—Ç—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É")
async def ask_price(message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–Ω—É.
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç –æ—Ä–¥–µ—Ä BTC:")

    @bot.message_handler(content_types=["text"])
    async def process_buy_step(msg):
        quantity = msg.text.strip()
        await bot.send_message(msg.chat.id, f"–í—ã –≤–≤–µ–ª–∏ {quantity} BTC!")
        await process_custom_price(msg)


async def process_custom_price(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é —Ü–µ–Ω—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥–∏ –ø–æ–∫—É–ø–∫–∏.
    """
    try:
        price = float(message.text)
        usdt_balance = get_balance("USDT")
        await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
        if usdt_balance < 10:
            await bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏! üî¥",
                                   reply_markup=get_main_keyboard())
            return

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for percent in [25, 50, 75, 100]:
            amount = round((usdt_balance * percent / 100), 2)
            quantity = Decimal(usdt_balance * percent / 100).quantize(Decimal("0.00001"), rounding=ROUND_DOWN)
            keyboard.add(KeyboardButton(f"–ö—É–ø–∏—Ç—å {percent}% ({quantity}:BTC={amount}:USDT) Price:{price}"))

        keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        await bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ {price} :",
                               reply_markup=keyboard)
    except ValueError:
        await bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_buy_menu())


@bot.message_handler(func=lambda message: message.text.startswith(("–ö—É–ø–∏—Ç—å")))
async def buy_selected_amount(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä.
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        pattern = r"\(([\d.]+):BTC=([\d.]+):USDT\) Price:([\d.]+)"
        match = re.search(pattern, message.text)

        if match:
            btc = float(match.group(1))
            usdt = float(match.group(2))
            price = float(match.group(3))
            order = make_order("BUY", btc, price)
            await bot.send_message(message.chat.id, f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ {btc} BTC —Ä–∞–∑–º–µ—â–µ–Ω!\n{order}",
                                   reply_markup=get_main_keyboard())
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
    except Exception as e:
        await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}", reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message):
    await send_menu(message)

@bot.message_handler(func=lambda message: message.text == "üìà –ü—Ä–æ–¥–∞—Ç—å")
async def sell_menu(message):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–¥–∞–∂–∏.
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=get_sell_menu())


@bot.message_handler(func=lambda message: message.text == "üí∞ –ü—Ä–æ–¥–∞—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É")
async def sell_now_menu(message):
    """
    –ú–µ–Ω—é —Å —à–∞–≥–∞–º–∏ –ø—Ä–æ–¥–∞–∂–∏ (25%, 50%, 75%, 100%).
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    btc_balance = get_balance("BTC")
    if btc_balance < 0.0001:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        await bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏! üî¥", reply_markup=get_main_keyboard())
        return

    price = get_price()
    await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: {price} USDT", reply_markup=get_main_keyboard())

    quantity = Decimal(btc_balance).quantize(Decimal("0.00001"), rounding=ROUND_DOWN)
    order = place_order("SELL", quantity)
    await bot.send_message(message.chat.id, f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {quantity} BTC —Ä–∞–∑–º–µ—â–µ–Ω!\n{order}",
                           reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda message: message.text == "üéØ –ü—Ä–æ–¥–∞—Ç—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É")
async def ask_sell_price(message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–Ω—É.
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å BTC:")

    @bot.message_handler(content_types=["text"])
    async def process_buy_step(msg):
        quantity = msg.text.strip()
        await bot.send_message(msg.chat.id, f"–í—ã –≤–≤–µ–ª–∏ {quantity} BTC!")
        await process_custom_sell_price(msg)


async def process_custom_sell_price(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é —Ü–µ–Ω—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥–∏ –ø—Ä–æ–¥–∞–∂–∏.
    """
    try:
        price = float(message.text)
        btc_balance = get_balance("BTC")
        await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {btc_balance} BTC")
        if btc_balance < 0.0001:
            await bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏! üî¥", reply_markup=get_main_keyboard())
            return

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for percent in [25, 50, 75, 100]:
            amount = Decimal(btc_balance * price).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
            quantity = Decimal(btc_balance * percent / 100).quantize(Decimal("0.00001"), rounding=ROUND_DOWN)
            keyboard.add(KeyboardButton(f"–ü—Ä–æ–¥–∞—Ç—å  {percent}% ({quantity}:BTC={amount}:USDT) Price:{price}"))

        keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        await bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø–æ {price} USDT:",
                               reply_markup=keyboard)
    except ValueError:
        await bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_sell_menu())


@bot.message_handler(func=lambda message: message.text.startswith("–ü—Ä–æ–¥–∞—Ç—å"))
async def sell_selected_amount(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        pattern = r"\(([\d.]+):BTC=([\d.]+):USDT\) Price:([\d.]+)"
        match = re.search(pattern, message.text)

        if match:
            btc = float(match.group(1))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC
            usdt = float(match.group(2))  # –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT
            price = float(match.group(3))  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            order = make_order("SELL", btc, price)
        else:
            return None, None, None
        await bot.send_message(message.chat.id, f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {btc} BTC —Ä–∞–∑–º–µ—â–µ–Ω!\n{order}",
                               reply_markup=get_main_keyboard())
    except Exception as e:
        await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}", reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda message: message.text == "üìë –û—Ä–¥–µ—Ä—ã")
async def open_orders(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.
    """
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    orders = get_open_orders()
    if orders:
        text = "\n".join([f"ID: {o['orderId']}, –°—Ç–æ—Ä–æ–Ω–∞: {o['side']}, –¶–µ–Ω–∞: {o['price']}" for o in orders])
    else:
        text = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"
    await bot.send_message(message.chat.id, text, reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda message: message.text == "üìä RSI")
async def send_rsi(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π RSI.
    """
    # data = fetch_historical_data("BTCUSDT", "15m", 50)
    # rsi_value = calculate_rsi(data)
    rsi = await fetch_and_calculate_rsi()
    await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π RSI: {rsi:.2f}", reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda message: message.text == "üìä –ì—Ä–∞—Ñ–∏–∫")
async def send_chart(message):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ BTC/USDT.
    """
    try:
        times, prices = fetch_candlestick_data()

        # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 5))
        plt.plot(times, prices, label="BTC/USDT", color="blue")
        plt.xlabel("–í—Ä–µ–º—è")
        plt.ylabel("–¶–µ–Ω–∞ (USDT)")
        plt.title("15-–º–∏–Ω—É—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ BTC/USDT")
        plt.grid(True)
        plt.legend()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–∞–º—è—Ç—å
        img_io = io.BytesIO()
        plt.savefig(img_io, format="png")
        img_io.seek(0)
        plt.close()

        price = get_price()

        await bot.send_photo(message.chat.id, img_io,
                             caption=f"üìä 15-–º–∏–Ω—É—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ BTC/USDT. –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: {price} USDT")

    except Exception as e:
        await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")


async def fetch_and_calculate_rsi():
    """ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—á–∏—Ç–∞–µ–º RSI """
    try:
        klines = client.get_klines(symbol=SYMBOL, interval=Client.KLINE_INTERVAL_15MINUTE, limit=30)
        df = pd.DataFrame(klines, columns=["timestamp", "open", "high", "low", "close", "volume", "close_time",
                                           "quote_asset_volume", "number_of_trades", "taker_buy_base",
                                           "taker_buy_quote", "ignore"])
        df["close"] = df["close"].astype(float)
        rsi = calculate_rsi(df)
        return rsi
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSI: {e}")
        return None


async def rsi_alert_loop():
    """ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º RSI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –≤ –¢–µ–ª–µ–≥—Ä–∞–º """
    while True:
        rsi = await fetch_and_calculate_rsi()
        if rsi is not None:
            if rsi < 30:
                await bot.send_message(CHAT_ID, f"üî¥ RSI = {rsi:.2f} (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω!) üö®")
            elif rsi > 70:
                await bot.send_message(CHAT_ID, f"üü¢ RSI = {rsi:.2f} (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω!) üö®")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å


async def market_watcher():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç.
    """
    while True:
        try:
            message = check_market()
            if message:
                await bot.send_message(CHAT_ID, f"‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! {message}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ market_watcher: {e}")
        await asyncio.sleep(60)  # –ñ–¥—ë–º 15 –º–∏–Ω—É—Ç (900 —Å–µ–∫—É–Ω–¥)


# async def monitor_market():
#     while True:
#         data = fetch_historical_data("BTCUSDT", interval="1m", limit=50)
#         if detect_crash_reversal(data):
#             await bot.send_message(CHAT_ID, "üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∑–∫–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç! –í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç!")
#         await asyncio.sleep(60)  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ä—Ç/–°—Ç–æ–ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
async def toggle_monitoring(message):
    global monitoring
    if monitoring:
        monitoring = False
        await bot.send_message(message.chat.id, '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
    else:
        monitoring = True
        await bot.send_message(message.chat.id, '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.')
        await monitor_market()

async def monitor_market():
    while monitoring:
        price = get_price()
        # log_to_db("INFO", f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {price}")
        data = fetch_historical_data("BTCUSDT", interval="1m", limit=50)
        if detect_crash_reversal(data, 1):
            await bot.send_message(CHAT_ID, "üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∑–∫–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç! –í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç!")
        await asyncio.sleep(60)

@bot.message_handler(func=lambda message: message.text == 'üöÄ –ê–≤—Ç–æ –ø—Ä–æ–¥–∞–∂–∞')
async def sell_auto_bot(message):
    if not is_authorized(message.chat.id):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å BTC:")

    @bot.message_handler(content_types=["text"])
    async def process_sell_step(msg):
        try:
            price = float(msg.text.strip())
            start_ws_monitoring(price)
            await bot.send_message(msg.chat.id, f"üéØ –û–∂–∏–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã {price} USDT...")
        except ValueError:
            await bot.send_message(msg.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@bot.message_handler(commands=["sell_status"])
async def check_sell_status(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∏"""
    if monitoring:
        await bot.send_message(message.chat.id, f"‚úÖ –ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞! –ñ–¥—ë–º —Ü–µ–Ω—É: {target_price} USDT")
    else:
        await bot.send_message(message.chat.id, "‚õî –ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

@bot.message_handler(commands=["sell_cancel"])
async def cancel_auto_sell(message):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂—É"""
    if monitoring:
        stop_ws_monitoring()
        await bot.send_message(message.chat.id, "üö´ –ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    else:
        await bot.send_message(message.chat.id, "‚õî –ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ –∏ —Ç–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")


@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∏")
async def check_auto_sell_button(message):
    await check_sell_status(message)

@bot.message_handler(func=lambda message: message.text == "üõë –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∏")
async def cancel_auto_sell_button(message):
    await cancel_auto_sell(message)


async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # asyncio.create_task(rsi_alert_loop())  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RSI
    # asyncio.create_task(market_watcher())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
    asyncio.create_task(monitor_market())
    await bot.polling()


if __name__ == "__main__":
    asyncio.run(main())
