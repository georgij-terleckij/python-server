from binance.client import Client
import pandas as pd
import numpy as np
import time
from config import API_KEY, API_SECRET, SYMBOL, AMOUNT
from logger import logger
from indicators import detect_crash_reversal

client = Client(API_KEY, API_SECRET)


def get_price():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC"""
    try:
        price = client.get_symbol_ticker(symbol=SYMBOL)["price"]
        return float(price)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None


def place_order(side, quantity = AMOUNT):
    """–†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä"""
    try:
        price = get_price()
        if price:
            order = client.create_order(
                symbol=SYMBOL,
                side=side,
                type="LIMIT",
                timeInForce="GTC",
                quantity=quantity,
                price=str(price),
            )
            logger.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
            return order
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None


def make_order(side, quantity, price):
    try:
        order = client.create_order(
            symbol=SYMBOL,
            side=side,
            type="LIMIT",
            timeInForce="GTC",
            quantity=quantity,
            price=str(price),
        )
        logger.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
        return order
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None


def place_test_order(quantity, price):
    try:
        order = client.create_test_order(
            symbol=SYMBOL,
            side="BUY",
            type="LIMIT",
            timeInForce="GTC",
            quantity=quantity,
            price=price)
        print(order)
        logger.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
        return order
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None


def get_open_orders():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    try:
        orders = client.get_open_orders(symbol=SYMBOL)
        logger.info(f"–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {orders}")
        return orders
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return []


def fetch_historical_data(symbol: str, interval="1h", limit=100):
    """
    –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance.
    :param symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT").
    :param interval: –¢–∞–π–º—Ñ—Ä–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1h" ‚Äì 1 —á–∞—Å).
    :param limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    :return: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
    df = pd.DataFrame(klines, columns=["timestamp", "open", "high", "low", "close", "volume", "close_time",
                                       "quote_asset_volume", "number_of_trades", "taker_buy_base", "taker_buy_quote",
                                       "ignore"])
    df["close"] = df["close"].astype(float)
    df["volume"] = df["volume"].astype(float)
    return df


def check_market():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ–∫ –Ω–∞ —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç.
    """
    data = fetch_historical_data(SYMBOL, "15m", 50)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 50 —Å–≤–µ—á–µ–π –ø–æ 15 –º–∏–Ω—É—Ç

    if detect_crash_reversal(data):
        mes = "‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è! –í–æ–∑–º–æ–∂–Ω–æ, —Ö–æ—Ä–æ—à–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä—ã–Ω–æ–∫."
        print(mes)
        return mes
    else:
        print("üöÄ –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ä—ã–Ω–æ–∫ —Å—Ç–∞–±–∏–ª–µ–Ω.")


def get_balance(asset: str) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã.

    :param asset: –¢–∏–∫–µ—Ä –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'USDT', 'BTC')
    :return: –ë–∞–ª–∞–Ω—Å –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    """
    try:
        balance = client.get_asset_balance(asset=asset)
        if balance:
            return float(balance["free"])
        return 0.0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ {asset}: {e}")
        return 0.0


def fetch_candlestick_data():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ BTC/USDT —Å Binance.
    """
    klines = client.get_klines(symbol="BTCUSDT", interval=Client.KLINE_INTERVAL_15MINUTE, limit=50)

    times = [int(entry[0]) for entry in klines]  # –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    prices = [float(entry[4]) for entry in klines]  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    times = np.array(times, dtype='datetime64[ms]')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è

    return times, prices
