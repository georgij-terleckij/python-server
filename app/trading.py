from binance.client import Client
import pandas as pd
import numpy as np
import asyncio
import concurrent.futures
import time
from database import log_to_db
from notifications import send_telegram_notification
from binance import ThreadedWebsocketManager
from config import API_KEY, API_SECRET, SYMBOL, AMOUNT
from logger import logger
from indicators import detect_crash_reversal

client = Client(API_KEY, API_SECRET)

monitoring = False  # –§–ª–∞–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
target_price = None
ws_manager = None
latest_price = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã


def start_ws_monitoring(price):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫"""
    global monitoring, target_price, ws_manager
    target_price = float(price)
    monitoring = True

    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    executor = concurrent.futures.ThreadPoolExecutor(max_workers=1)
    loop = asyncio.get_running_loop()
    loop.run_in_executor(executor, start_ws)

def start_ws():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global ws_manager
    ws_manager = ThreadedWebsocketManager()
    ws_manager.start()
    ws_manager.start_symbol_ticker_socket(callback=handle_ws_message, symbol=SYMBOL)


def stop_ws_monitoring():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    global monitoring, ws_manager
    monitoring = False

    if ws_manager:
        ws_manager.stop()
        ws_manager = None

def handle_ws_message(msg):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance WebSocket"""
    global monitoring, latest_price
    if not monitoring:
        return

    latest_price = float(msg["c"])  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    print(f"üî• –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {latest_price} USDT")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º loop
    loop = asyncio.get_event_loop()
    if loop.is_running():
        loop.create_task(check_sell_trigger(latest_price))
    else:
        asyncio.run(check_sell_trigger(latest_price))

async def check_sell_trigger(price):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    global monitoring, target_price

    if price >= target_price:
        print(f"üéØ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ {target_price}, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞...")
        await monitor_price_trend()

async def monitor_price_trend():
    """–°–ª–µ–¥–∏–º –∑–∞ —Ü–µ–Ω–æ–π 10 —Å–µ–∫—É–Ω–¥ –∏ –∏—â–µ–º –º–æ–º–µ–Ω—Ç –º–∞–∫—Å–∏–º—É–º–∞"""
    global monitoring
    max_price = None
    start_price = get_latest_price()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É

    for i in range(10):
        await asyncio.sleep(1)
        latest_price = get_latest_price()

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–∞–∫—Å–∏–º—É–º –∑–∞ 10 —Å–µ–∫—É–Ω–¥
        if max_price is None or latest_price > max_price:
            max_price = latest_price

        print(f"üìä [{i + 1}/10] –¶–µ–Ω–∞ BTC: {latest_price}, –º–∞–∫—Å: {max_price}")

    if max_price < start_price * 1.001:  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –ø–æ—à–ª–∞ –≤–≤–µ—Ä—Ö –Ω–∞ 0.1%, –ø—Ä–æ–¥–∞—ë–º
        print(f"‚úÖ –¶–µ–Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å, –ø—Ä–æ–¥–∞—ë–º –ø–æ {max_price}!")
        # place_order("SELL", 0.001)
        log_to_db("SELL", f"–ü—Ä–æ–¥–∞–∂–∞ BTC –ø–æ {max_price}, —Å—Ç–∞—Ä—Ç –±—ã–ª {start_price}")
        # await send_telegram_notification(f"üöÄ –ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞! –ü—Ä–æ–¥–∞–ª–∏ BTC –ø–æ {max_price} USDT!")
    else:
        print(f"‚ùå –¶–µ–Ω–∞ –µ—â—ë —Ä–∞—Å—Ç—ë—Ç, –∂–¥—ë–º –¥–∞–ª—å—à–µ.")
        # await send_telegram_notification(f"‚è≥ –¶–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç, –Ω–µ –ø—Ä–æ–¥–∞—ë–º! –ú–∞–∫—Å: {max_price} USDT")

    stop_ws_monitoring()

    # for _ in range(10):
    #     await asyncio.sleep(1)
    #     latest_price = get_latest_price()
    #     if max_price is None or latest_price > max_price:
    #         max_price = latest_price
    #     else:
    #         print(f"üìâ –¶–µ–Ω–∞ –Ω–∞—á–∞–ª–∞ –ø–∞–¥–∞—Ç—å: {latest_price}, –ø—Ä–æ–¥–∞—ë–º!")
    #         # place_order("SELL", 0.001)  # –ü—Ä–æ–¥–∞—ë–º 0.001 BTC
    #         log_to_db("SELL",f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {latest_price} –ó–∞–ª–æ—á–µ–Ω–æ {target_price}")
    #         stop_ws_monitoring()
    #         return
    #
    # print(f"‚è≥ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ, –ø—Ä–æ–¥–∞—ë–º –ø–æ {max_price}!")
    # # place_order("SELL", 0.001)
    # log_to_db("SELL", f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {max_price} –ó–∞–ª–æ—á–µ–Ω–æ {target_price}")
    # stop_ws_monitoring()

def get_latest_price():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC (–∏–∑ WebSocket)"""
    return latest_price
    # return float(ws_manager.tickers[SYMBOL]["c"])

def get_price():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC"""
    try:
        price = client.get_symbol_ticker(symbol=SYMBOL)["price"]
        return float(price)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None


def place_order(side, quantity = AMOUNT):
    """–†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä"""
    try:
        price = get_price()
        if price:
            order = client.create_order(
                symbol=SYMBOL,
                side=side,
                type="LIMIT",
                timeInForce="GTC",
                quantity=quantity,
                price=str(price),
            )
            logger.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
            return order
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None


def make_order(side, quantity, price):
    try:
        order = client.create_order(
            symbol=SYMBOL,
            side=side,
            type="LIMIT",
            timeInForce="GTC",
            quantity=quantity,
            price=str(price),
        )
        logger.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
        return order
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None


def place_test_order(quantity, price):
    try:
        order = client.create_test_order(
            symbol=SYMBOL,
            side="BUY",
            type="LIMIT",
            timeInForce="GTC",
            quantity=quantity,
            price=price)
        print(order)
        logger.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
        return order
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None


def get_open_orders():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    try:
        orders = client.get_open_orders(symbol=SYMBOL)
        logger.info(f"–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {orders}")
        return orders
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return []


def fetch_historical_data(symbol: str, interval="1h", limit=100):
    """
    –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance.
    :param symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT").
    :param interval: –¢–∞–π–º—Ñ—Ä–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1h" ‚Äì 1 —á–∞—Å).
    :param limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    :return: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
    df = pd.DataFrame(klines, columns=["timestamp", "open", "high", "low", "close", "volume", "close_time",
                                       "quote_asset_volume", "number_of_trades", "taker_buy_base", "taker_buy_quote",
                                       "ignore"])
    df["close"] = df["close"].astype(float)
    df["volume"] = df["volume"].astype(float)
    return df


def check_market():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ–∫ –Ω–∞ —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç.
    """
    data = fetch_historical_data(SYMBOL, "15m", 50)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 50 —Å–≤–µ—á–µ–π –ø–æ 15 –º–∏–Ω—É—Ç

    if detect_crash_reversal(data):
        mes = "‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è! –í–æ–∑–º–æ–∂–Ω–æ, —Ö–æ—Ä–æ—à–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä—ã–Ω–æ–∫."
        print(mes)
        return mes
    else:
        print("üöÄ –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ä—ã–Ω–æ–∫ —Å—Ç–∞–±–∏–ª–µ–Ω.")


def get_balance(asset: str) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã.

    :param asset: –¢–∏–∫–µ—Ä –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'USDT', 'BTC')
    :return: –ë–∞–ª–∞–Ω—Å –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    """
    try:
        balance = client.get_asset_balance(asset=asset)
        if balance:
            return float(balance["free"])
        return 0.0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ {asset}: {e}")
        return 0.0


def fetch_candlestick_data():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ BTC/USDT —Å Binance.
    """
    klines = client.get_klines(symbol="BTCUSDT", interval=Client.KLINE_INTERVAL_15MINUTE, limit=50)

    times = [int(entry[0]) for entry in klines]  # –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    prices = [float(entry[4]) for entry in klines]  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    times = np.array(times, dtype='datetime64[ms]')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è

    return times, prices
